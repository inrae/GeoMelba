# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeomelbaSpirit
                                 A QGIS plugin
 Based on GeoMelba software, meant to be used with the serious game CAUSERIE.
 This file contains the class based on QGIS QgsVectorLayer used for each element of the landscape.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-24
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Jules Grillot / INRAE
        email                : jules.grillot@inrae.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# QT Modules
from PyQt5.QtWidgets import QMessageBox
# Qgis Modules
from qgis.core import QgsVectorLayer
# Personal Modules
from ..dictionnaire import river, field_parcel_practice, information_selection_error, \
    information_selection_error_parcel_1, information_selection_error_parcel_2, information_selection_error_parcel_3, \
    information_selection_error_line_1, information_selection_error_line_2


class ParcelLayer(QgsVectorLayer):
    """ Class to manage the changes on the parcel layer.
    """

    def __init__(self, path, baseName, providerLib):
        """The class is called the same way as the QgsVectorLayer class, with the path of the layer, it's name and it's
        provider.
        """
        QgsVectorLayer.__init__(self, path, baseName, providerLib)
        self.production_type = None
        self.practices = None

    def set_parameters(self, production_type, practices):
        self.production_type = production_type
        self.practices = practices

    def handle_value_changed(self, field, features_id, value, old_value):
        """Manage the changes made on the parcel layer. If the land cover of a parcel change it may cause a change in
        the agricultural practices. The agricultural practices can also be modified with the plugin. This method is
        called on spirit_dockwidget when a modification is made on the parcel layer before it is saved.
        """
        # Get old values from the parcel.
        attrs = self.getFeature(features_id[0]).attributes()
        old_label = attrs[self.fields().indexFromName(field_parcel_practice)]
        # If the modified field is the one on agricultural practices, the new one should be different from the old one,
        # the new one can only be added to an agricultural parcel.
        if str(field) == field_parcel_practice:
            if value in list(self.practices.values()):
                # If it's not an agricultural parcel.
                if old_label == 99:
                    QMessageBox.information(None, information_selection_error, information_selection_error_parcel_1)
                # If the agricultural practice is the same as the old one.
                elif value == old_label:
                    QMessageBox.information(None, information_selection_error, information_selection_error_parcel_2)
                # Modification of the agricultural practice.
                else:
                    self.startEditing()
                    for feature_id in features_id:
                        attrs = self.getFeature(feature_id).attributes()
                        old = attrs[self.fields().indexFromName(field)]
                        if old == old_value:
                            self.changeAttributeValue(feature_id, self.fields().indexFromName(field), value)
        # If the modified field is the one on land cover, the new value needs to be different from the old one. If an
        # agricultural parcel became a non-agricultural parcel, the practice has to change and vice versa.
        else:
            # If the new value is the same as the old value, an error message is send.
            if value == old_value:
                QMessageBox.information(None, information_selection_error,
                                        information_selection_error_parcel_3)
            # Check if the parcel needs to change agricultural practice or not. If a non-agricultural parcel become an
            # agricultural parcel it's practice became 1. If a agricultural parcel become an non-agricultural parcel,
            # it's practice become none (99)
            else:
                self.startEditing()
                if value in self.production_type and old_value not in self.production_type:
                    for feature_id in features_id:
                        self.changeAttributeValue(feature_id, self.fields().indexFromName(field), value)
                        self.changeAttributeValue(feature_id, self.fields().indexFromName(field_parcel_practice), 1)
                elif value not in self.production_type and old_value in self.production_type:
                    for feature_id in features_id:
                        self.changeAttributeValue(feature_id, self.fields().indexFromName(field), value)
                        self.changeAttributeValue(feature_id, self.fields().indexFromName(field_parcel_practice), 99)
                else:
                    for feature_id in features_id:
                        self.changeAttributeValue(feature_id, self.fields().indexFromName(field), value)
        while self.isEditable():
            self.commitChanges()
            self.triggerRepaint()


class LineLayer(QgsVectorLayer):
    """Class to manage the changes on the line layer.
    """

    def __init__(self, path, baseName, providerLib):
        """The class is called the same way as the QgsVectorLayer class, with the path of the layer, it's name and it's
        provider.
        """
        QgsVectorLayer.__init__(self, path, baseName, providerLib)

    def handle_value_changed(self, field, features_id, value, old_value):
        """Manage the changes made on the line layer. This method is called on spirit_dockwidget when a modification is
        made on the line layer before it is saved.
        """
        # If the new value is the same as the old one, an error message is send.
        if value == old_value:
            QMessageBox.information(None, information_selection_error, information_selection_error_line_1)
        # Modifications are made.
        elif old_value != river:
            self.startEditing()
            for feature_id in features_id:
                attrs = self.getFeature(feature_id).attributes()
                old = attrs[self.fields().indexFromName(field)]
                if old == old_value:
                    self.changeAttributeValue(feature_id, self.fields().indexFromName(field), value)
            self.commitChanges()
            self.triggerRepaint()
        # If the old value concern a river section, an error message is send.
        else:
            QMessageBox.information(None, information_selection_error, information_selection_error_line_2)
